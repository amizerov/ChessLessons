@using chess5.Models;
@model chess5.Models.MyGame
@{
    ViewBag.Title = "Игра с живым игроком онлайн бесплатно";
    ViewBag.Description = "Играй с живыми игроками онлайн, зарабатывай ChessCoin-ы, копи на призы, оплачивай уроки!";
    ViewBag.GetRequest = "game";
    ViewBag.ColContentClasses = "col-md-12 page--game";
    ViewBag.ShowNotes = false;
}

<link rel="stylesheet" href="~/board/css/new_chessboard.css?v=124" />
<script src="~/board/js/new_chessboard.js?v=101"></script>
<script src="~/board/js/chess.js"></script>

<div class="page--game-container">
    <div class="col-md-7" style="margin-bottom: 15px;">

        <div class="board-panel board-top">
            <div class="board-panel-item">
                <div class="board-panel-info">
                    <img class="img_profile_game" id="SopernikAvatar" src="https://im0-tub-ru.yandex.net/i?id=85932e933bfdd332ec0cc52e9f6f9e2d&n=13">
                    <span class="user_name" id="sopernik">@Model.SoperNik</span>
                </div>
                <div class="removed_piece" id="removed_piece1"></div>
                <div class="board-panel-time">
                    <span class="right-item bg-dark" id="time1">0:05:00</span>
                </div>
            </div>
        </div>

        <div id="board" class="cb_shadow" style="width: 100%;"></div>

        <div class="board-panel board-bottom">
            <div class="board-panel-item">
                <div class="board-panel-info">
                    @if (CurrentUser.Person.Avatar.Length > 100)
                    {
                        <img class="img_profile_game" src="@CurrentUser.Person.Avatar">
                    }
                    else
                    {
                        <img class="img_profile_game" src="https://im0-tub-ru.yandex.net/i?id=85932e933bfdd332ec0cc52e9f6f9e2d&n=13">
                    }
                    <span class="user_name" id="user_name2">@CurrentUser.Person.NikName (@CurrentUser.Account.RatingGame)</span>
                </div>
                <div class="removed_piece" id="removed_piece2"></div>
                <div class="board-panel-time">
                    <span class="right-item bg-light" id="time2">0:05:00</span>
                </div>
            </div>
        </div>

    </div>
    <div id="resizetest" class="col-md-5">
        <div class="m_show_panels_wrapper">
            <div class="m_show_panels_container">
                <div id="show_panel_wrp_1" class="m_show_panel-item"><span>Настройки доски</span></div>
                <div id="show_panel_wrp_2" class="m_show_panel-item"><span>Ходы</span></div>

            </div>
        </div>
        <div id="panel_wrp_2" class="panel-wrapper m_hide-wrapper">
            <div id="open_chats_3" class="panel bg-panel">
                <div class="panel__close">
                    <span class="link-item">
                        <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
                    </span>
                </div>
                <div class="panel__scroll-wrapper">
                    <div class="panel-title">
                        <div class="flex_style">
                            <button class="open_chats_1 active">ХОДЫ</button>
                            <button class="open_chats_2">ЧАТ</button>
                        </div>
                    </div>
                    <div id="resize_block">
                        <div id="resize_block1" class="chat_online_2 active">
                            <div class="fix-height-container">
                                <div id="pgn" class="fix-height"></div>
                            </div>
                            <div class="btns_show_moves chat_6">
                                <button class="btnDesign" onclick="startMove()"><i class="fas fa-angle-double-left"></i></button>
                                <button class="btnDesign" id="prev_move" onclick="prevMove()"><i class="fas fa-angle-left"></i></button>
                                <button class="btnDesign" id="next_move" onclick="nextMove()"><i class="fas fa-angle-right"></i></button>
                                <button class="btnDesign" onclick="endMove()"><i class="fas fa-angle-double-right"></i></button>
                            </div>
                        </div>
                        <div id="resize_block2" class="chat_online">
                            <div class="chat"></div>
                            <div class="position_realt">
                                <a href="#" title="Отправить сообщение" class="chat_4"><i class="fas fa-arrow-alt-circle-right"></i></a>
                                <textarea placeholder="Текст сообщения" maxlength="100" class="chat_5"></textarea>
                            </div>
                        </div>
                    </div>
                    <div id="block_resizer" class="panel__scroller">
                        <span class="scroller__line"></span>
                        <span class="scroller__line"></span>
                    </div>
                </div>
            </div>
        </div>
        <div id="panel_wrp_1" class="panel-wrapper m_hide-wrapper">
            <div class="panel bg-panel">
                <div class="panel__close">
                    <span class="link-item">
                        <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
                    </span>
                </div>
                <div class="panel__scroll-wrapper">
                    <button class="btnDesign btnSettings" onclick="modal_open('settings');" data-placement="auto" title="Настройки доски">
                        <i class="fas fa-cogs"></i>
                    </button>
                    <button class="btnDesign btnSettings" onclick="dowload_pgn('dowload_pgn');" data-placement="auto" title="Настройки доски">
                        <i class="fas fa-save"></i>
                    </button>
                    <button id="btn-draw" class="btn2 btn2-default" onclick="modal_open('confirm_offer_draw');" data-placement="auto" title="Предложить ничью">
                        <i class="fas fa-handshake"></i>
                    </button>
                    <button id="btn-surrender" class="btn2 btn2-default" onclick="modal_open('confirm_surrender');" data-placement="auto" title="Сдаться">
                        <i class="fas fa-flag"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="modal_dowload_pgn_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="modal__form__title" style="text-align: left">
                    <span>История игры</span>
                </div>
                <textarea class="dowload_pgn-textarea w-100" rows="6">1. h4 b5 2. c4</textarea>
            </div>
        </div>
    </div>
</div>
<div id="modal_game_settings_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="panel-title">
                    <span><b>Настройки игры</b></span>
                </div>
                <form>
                    <div class="form-group inline-item">
                        <label class="control-label">Время (мин.)</label>
                        <input class="form-control" type="number" id="timeBase" value="5">
                    </div>
                    <div class="form-group inline-item">
                        <label class="control-label">Добавление (сек.)</label>
                        <input class="form-control" type="number" id="timeInc" value="2">
                    </div>
                    <div class="form-group inline-item">
                        <label class="control-label">Уровень (от 0 до 20)</label>
                        <input class="form-control" type="number" id="skillLevel" value="1">
                    </div>
                    <div class="form-group inline-item">
                        <label class="control-label">Фигуры</label>
                        <div class="right-item">
                            <label class="btn2 btn-primary2" id="color-white">
                                <input id="clr-white" type="radio" name="color" checked="">
                                <span class="input--checked">Белые</span>
                            </label>
                            <label class="btn2 btn-primary2" id="color-black">
                                <input id="clr-black" type="radio" name="color">
                                <span class="input--checked">Черные</span>
                            </label>
                        </div>
                    </div>
                    <button type="button" class="btn btn-start-game" onclick="newGame(true)">Новая игра</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="modal_new_game_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
            </div>
        </div>
    </div>
</div>
<div id="modal_confirm_offer_draw_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
                <div id="offer_draw__hide_request">
                    <div class="modal__form__title">
                        <span>Вы действительно хотите предложить ничью?</span>
                    </div>
                    <div id="offer_draw__buttons_confirm">
                        <button class="btn btn-primary w_auto" onclick="request_offer_draw();">Да</button>
                        <button class="btn btn-default w_auto" onclick="modal_close('confirm_offer_draw');">Нет</button>
                    </div>
                </div>
                <div id="offer_draw__content">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="modal_request_draw_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__collapse" data-func-collapsed="request_draw" data-text-collapsed="Ничья">
            <span class="link-item">
                <span>Свернуть окно</span><img src="https://img.icons8.com/windows/22/000000/forward.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
                <div id="offer_draw__hide_request">
                    <div class="modal__form__title">
                        <span>Ваш соперник предлагает ничью</span>
                    </div>
                    <div id="offer_draw__buttons_confirm">
                        <button class="btn btn-primary w_auto" onclick="send_success_draw();">Принять</button>
                        <button class="btn btn-default w_auto" onclick="send_reject_draw();">Отклонить</button>
                    </div>
                </div>
                <div id="offer_draw__content">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="modal_confirm_surrender_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__close">
            <span class="link-item">
                <img src="https://img.icons8.com/windows/22/000000/delete-sign.png">
            </span>
        </div>
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="modal__form__title">
                    <span>Вы действительно хотите сдаться?</span>
                </div>
                <button class="btn btn-primary w_auto" onclick="request_surrender();">Да</button>
                <button class="btn btn-default w_auto" onclick="modal_close('confirm_surrender');">Нет</button>
            </div>
        </div>
    </div>
</div>
<div id="modal_waiting_player_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="modal__form__title">
                    <span>Ожидание соперника...</span>
                </div>
                <div class="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="lds-message" width="80px" height="80px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
                        <g transform="translate(20 50)">
                            <circle cx="0" cy="0" r="7" fill="#e15b64" transform="scale(0.161016 0.161016)">
                                <animateTransform attributeName="transform" type="scale" begin="-0.375s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="1s" repeatCount="indefinite" />
                            </circle>
                        </g>
                        <g transform="translate(40 50)">
                            <circle cx="0" cy="0" r="7" fill="#f47e60" transform="scale(0.49232 0.49232)">
                                <animateTransform attributeName="transform" type="scale" begin="-0.25s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="1s" repeatCount="indefinite" />
                            </circle>
                        </g>
                        <g transform="translate(60 50)">
                            <circle cx="0" cy="0" r="7" fill="#f8b26a" transform="scale(0.827363 0.827363)">
                                <animateTransform attributeName="transform" type="scale" begin="-0.125s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="1s" repeatCount="indefinite" />
                            </circle>
                        </g>
                        <g transform="translate(80 50)">
                            <circle cx="0" cy="0" r="7" fill="#abbd81" transform="scale(0.999922 0.999922)">
                                <animateTransform attributeName="transform" type="scale" begin="0s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="1s" repeatCount="indefinite" />
                            </circle>
                        </g>
                    </svg>
                    <div>
                        <a class="btn btn-default" href="/game">Отмена</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="modal_select_piece_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="modal__form__title">
                    <span>Выберите фигуру</span>
                </div>
                <button class="btn2 btn2-default btn___select_piece" data-piece="q"><img src="/board/pieces/tour_new/bQ.png"></button>
                <button class="btn2 btn2-default btn___select_piece" data-piece="b"><img src="/board/pieces/tour_new/bB.png"></button>
                <button class="btn2 btn2-default btn___select_piece" data-piece="n"><img src="/board/pieces/tour_new/bN.png"></button>
                <button class="btn2 btn2-default btn___select_piece" data-piece="r"><img src="/board/pieces/tour_new/bR.png"></button>
            </div>
        </div>
    </div>
</div>
<div id="modal_closed_game_wrapper" class="modal-wrapper">
    <div class="c_modal w_auto">
        <div class="modal__content">
            <div class="form-wrapper">
                <div class="modal__form__title">
                    <span>Эта игра уже закрыта</span>
                </div>
                <div class="text-center"><a class="btn btn-default" href="/game">Новая игра</a></div>
            </div>
        </div>
    </div>
</div>
@section scripts{
<script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
<script src="~/signalr/hubs"></script>
<script>
    var IsActive = '@Model.IsActive';
    IsActive = IsActive === 'False' ? false : true;
    var gameOverResult = {r1: '',r2: '',r3: ''};
    var MyColor = '@Model.MyColor';
    var SopernikColor = (MyColor === 'w') ? 'b' : 'w';
    var game = new Chess();
    var init_game = '';
    var LastMove, GameStatus;
    var Game_ID = @Model.Game_ID;
    // default - 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
    // мат - 'rnbqkbnr/pppp1ppp/4p3/8/8/5P2/PPPPP1PP/RNBQKBNR w KQkq - 0 2';
    var curPosition = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
    var baseTime = @Model.BaseTime * 60;
    var inc = @Model.Increment;
    var display = 0 + ':' + ('0' + baseTime / 60).slice(-2) + ':00';
    $('#time1').text(display);
    $('#time2').text(display);
    var sopernik = $('#sopernik');
    var SopernikTuta = false;
    var boardEl = $('#board');
    var squareToHighlight;
    var colorToHighlight;
    var game_history_fen = [curPosition];
    var board = ChessBoard('board');
    var getMoveInterval;
    var waitForSopernikInterval;
    var stop_clock = false;
    var tick_tack = false;
    var select_promotion = false;
    var showed_reject_offer_draw = false;
    var showed_success_offer_draw = false;
    var msgs_not_viewed_count = 0;

    if (IsActive !== true) {
        $(function () { modal_open('closed_game'); });
    } else {
        waitForSopernikInterval = setInterval(WaitForSopernik, 1000);
        setTimeout(stopWaitForSopernik, 60000);
    }
    function stopWaitForSopernik() {
        if (SopernikTuta === true) return;
        $.ajax({
            type: 'GET',
            url: '@Url.Action("CloseGame")',
            //url: '/ajax/close_game',
            data: { "Game_ID": Game_ID },
            dataType: 'json',
            success: function (res) {
                if(res === true) {
                    $('#modal_waiting_player_wrapper .form-wrapper').html('<div class="modal__form__title">'
                        +'<span>Не удалось найти соперника</span></div>'
                        +'<div class="text-center"><a class="btn btn-default" href="/game">Новая игра</a></div>');
                    clearInterval(waitForSopernikInterval);
                    console.log(res);
                }
            },
            error: function (emp) {
                console.log('нет связи с сервером');
            }
        });
    }
    function WaitForSopernik() {
        if (SopernikTuta === true) return;
        modal_open('waiting_player');
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetSopernik")',
            data: { "Game_ID": Game_ID, "MyColor": MyColor },
            dataType: 'json',
            success: function (res) {
				console.log(res);
                if (res.User_ID && res.User_ID.length > 0) {
                    modal_close('waiting_player');

                    sopernik.html(res.NikName + ' (' + res.Rating + ')');
                    if (res.Avatar.length > 100)
                        $('#SopernikAvatar').attr('src', res.Avatar);

                    SopernikTuta = true;
                    init_game = initGame();
                    setTime(baseTime, inc);
                    startClock();
                    getMoveInterval = setInterval(GetMove, 1000);

                    document.title = document.title.replace('\\', '').replace('/', '');

                    var notificationhub = $.connection.notificationHub;

                    notificationhub.client.displayMessage = function (data) {
                        console.log(['ws', data])
                        if (data.Type && data.Type === 'chat_message' && data.Game_ID && data.Game_ID === Game_ID) {
                            if (data.SenderColor === MyColor) { return; }
                            add_msg_chat('chat_2', data.Message);
                        }
                    };

                    $.connection.hub.start();
                }
                else {
                    document.title = (tick_tack ? '\\' : '/') + document.title.replace('\\', '').replace('/', '');
                    tick_tack = !tick_tack;
                }
            },
            error: function (emp) {
                modal_close('waiting_player');
                console.log('нет связи с сервером');
            }
        });
    }
    function GetMove() {
		//console.log('getMove');
        //if (MyColor !== game.turn() && !stop)
        //{//Если ход соперника, ждем и пытаемся получить ход
        if(stop_clock === true) {
			return;
		}
		$.ajax({
			type: 'GET',
			url: '@Url.Action("GetMove")',
			data: { "Game_ID": Game_ID, "MyColor": MyColor },
			dataType: 'json',
			success: function (res) {
				//console.log(res);
				///console.log(res.Status);
				var m = res.Move; //Ждем хода соперника
				if ( res.SecondsSopernikOffline > 5) {//соперник отключился
					var color = 'white'; tick_tack = !tick_tack;
					var s = res.SecondsSopernikOffline;
					if (s > 15) color = tick_tack ? 'orange' : 'white';
					if (s > 25) color = tick_tack ? 'red' : 'white';
					sopernik.css('color', color);
					if (res.SecondsSopernikOffline > 30) {
						console.log('соперник покинул игру');
						playAudio("/img/mate2.mp3");
						stopClock();
						gameOverResult = { r1: 'win', r2: 'close', r3: false };
						SetGameResult(2);
					}
				} else if (res.Status === 'RequestDraw.' + SopernikColor){
					modal_open('request_draw');
				} else if (res.Status === 'SuccessDraw.' + SopernikColor){
					success_offer_draw();
				} else if (res.Status === 'RejectDraw.' + SopernikColor){
					reject_offer_draw();
				} else if (res.Status === 'Resign' && !stop){
					//Соперник сдался, надо показать модал окно результата
					playAudio("/img/mate2.mp3");
					stopClock();
					gameOverResult = {r1: 'win',r2: 'surrender',r3: false};
					SetGameResult(2);
				/*} else if( res.FEN.length > 0 && res.FEN !== game.fen() && game.fen() == curPosition ){
					console.log([res, game.fen()]);
					curPosition = res.FEN;
					init_game = initGame();
					setTime(baseTime, inc);
					startClock();*/
				} else if ( MyColor !== game.turn() && !stop && m !== null && m !== "" && m !== undefined) {//&& m !== null && m !== "" && m !== undefined
					if(res.FEN === game.fen()) return;
					//console.log(game.pgn());
					var h = JSON.parse(res.History);
					//Если соперник сделал ход
					board.move(h.from+'-'+h.to);//делаем ход на доске

					if( 'promotion' in h )
						game.move({ from: h.from, to: h.to, promotion: h.promotion });
					else
						game.move({ from: h.from, to: h.to, promotion: 'q' });

					//обновляем позицию на доске если ракировка или en-pasan
					if(h.flags === 'k' || h.flags === 'q' || h.flags === 'np' || h.flags === 'e') {
						board.position(game.fen());
					}

					updateStatus();//обновление надписей на экране
					//(new Audio("/img/standUp.mp3")).play();

					stopClock(); updateClock(); startClock();
					squareHighlight();
					getRemovedPiece(game.fen());
					game_history_fen.push(game.fen());
					displayHistoryPgn();
				}

			},
			error: function (emp) {
				console.log('нет связи с сервером');
			}
		});
        //}
    }
    function sendMessage(data) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetMove")',
            data: data,
            dataType: 'json',
            success: function (res) {
                if (res > 0)
                {
                    stopClock(); updateClock(); startClock();
                    //(new Audio("/img/standUp.mp3")).play();
                }
            },
            error: function (emp) {
               console.log('нет связи с сервером');
            }
        });
    };
    function SetMove() {
		if(stop_clock === true) {
			//return;
		}
        var l = game.history().length;
        game_history_fen.push(game.fen());
        squareHighlight();
        onMoveEnd();
        displayHistoryPgn();
        var hishory = game.history( {verbose: true} );
        if( hishory.length > 0 ) hishory = hishory[hishory.length - 1];
        //console.log(game.pgn());
        var data = {
            _token: $('meta[name="csrf-token"]').attr('content'),
            "Game_ID": Game_ID,
            "MoveNumb": (l + l%2)/2,
            "MoveColor": game.turn()==='b'?'w':'b',
            "Move": LastMove,
            "History": JSON.stringify(hishory),
            "FEN": game.fen(),
            "PGN": game.pgn(),
            "Status": GameStatus,
            "Time": time.clockColor === 'white' ? time.wtime : time.btime
        };

        sendMessage(data);
    };
    var onDragStart = function (source, piece, position, orientation) {
        if (game.game_over() === true ||
            (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
            (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
            (game.turn() !== MyColor)) {
            return false;
        }
    };
    var onDrop = function (source, target) {
        removeGreySquares();
        LastMove = source + '-' + target;
        // see if the move is legal
        var move = game.move({
            from: source,
            to: target,
            promotion: 'q' // NOTE: always promote to a queen for example simplicity
        });
        // illegal move
        if (move === null) return 'snapback';
        else game.undo();

        var source_rank = source.substring(2,1);
        var target_rank = target.substring(2,1);
        var piece = game.get(source).type;

        if (piece === 'p' && ( (source_rank === '7' && target_rank === '8') || (source_rank === '2' && target_rank === '1') ) ) {
            select_piece_promotion(move);
            return;
        }

        makeMove(move);
    };
    function makeMove(move) {
        game.move(move);

        updateStatus();
        SetMove();
        history_counter = false;

        prev_move = false;
        next_move = false;
    };
    var onSnapEnd = function () {
        if(select_promotion === true) return;
        snapEnd();
    };
    function snapEnd() {
        board.position(game.fen());
        select_promotion = false;
        getRemovedPiece(game.fen());
        history_counter = false;
        prev_move = false;
        next_move = false;
    };
    var removeGreySquares = function() {
        $('#board .cb_square').removeClass(['cb_overlay_l', 'cb_overlay_d']);
    };
    var greySquare = function(square) {
        var squareEl = $('#board .cb_square-' + square);
        var cls = 'cb_overlay_l';
        if (squareEl.hasClass('black') === true)
            cls = 'cb_overlay_d';
        squareEl.addClass(cls);
    };
    var onMouseoverSquare = function(square, piece) {
        var moves = game.moves({
            square: square,
            verbose: true
        });
        if (moves.length === 0) return;
        if(!$('.cb_square-' + square).hasClass('cb_piece--active') && $('.cb_square').hasClass('cb_piece--active'))
            return;
        greySquare(square);
        for (var i = 0; i < moves.length; i++) {
            greySquare(moves[i].to);
        }
    };
    var onMouseoutSquare = function(square, piece) {
        if($('.cb_square').hasClass('cb_piece--active')) {
            removeGreySquares();
            onMouseoverSquare($('.cb_square.cb_piece--active').attr('data-square'), null);
        } else
            removeGreySquares();
    };
    var squareHighlight = function() {
        var history = game.history({verbose: true});
        var hlen = history.length;
        if(hlen === 0) return;
        boardEl.find('.cb_square').removeClass('cb_highlight-black');
        boardEl.find('.cb_square').removeClass('cb_highlight-white');
        if (history[hlen-1].color === 'w') {
            boardEl.find('.cb_square-' + history[hlen-1].from).addClass('cb_highlight-white');
            squareToHighlight = history[hlen-1].to;
            colorToHighlight = 'white';
        }
        else {
            boardEl.find('.cb_square-' + history[hlen-1].from).addClass('cb_highlight-black');
            squareToHighlight = history[hlen-1].to;
            colorToHighlight = 'black';
        }
    };
	var onMoveEnd = function() {
        boardEl.find('.cb_square-' + squareToHighlight).addClass('cb_highlight-' + colorToHighlight);

        var my_move = (game.turn() === MyColor);
        var hishory = game.history( {verbose: true} );
        if( hishory.length > 0 ) hishory = hishory[hishory.length - 1];

        var audio = '/img/standUp.mp3';
        if(game.in_check()) {
            audio = '/img/mate1.mp3';
        } else if(game.in_checkmate()) {
            audio = '/img/mate2.mp3';
        } else if(hishory.flags === 'c') {
            audio = '/img/Take1.mp3';
        } else {
            audio = (my_move) ? '/img/move1.mp3' : '/img/move2.mp3';
        }
        playAudio(audio);
    };
    var initGame = function () {
        game.load(curPosition);
        getRemovedPiece(game.fen());
        var cfg = {
            draggable: true,
            position: curPosition,
            onDragStart: onDragStart,
            onDrop: onDrop,
            onSnapEnd: onSnapEnd,
            orientation: MyColor === 'w' ? 'white' : 'black',
            onMoveEnd: onMoveEnd,
            onMouseoutSquare: onMouseoutSquare,
            onMouseoverSquare: onMouseoverSquare,
            pieceTheme: './board/pieces/tour_new/{piece}.png'
        };
        board = ChessBoard('board', cfg);
        if(MyColor !== 'w') {
            $('.board-panel').addClass('reverse');
        } else {
            $('.board-panel').removeClass('reverse');
        }
        playAudio("/img/StartGame1.mp3");
        updateStatus();
    }
    function updateStatus(flags) {

        var status = '';
        var moveColor = (game.turn() === 'b') ? 'White' : 'Black';
        var my_move = (game.turn() === MyColor);

        if(game.in_checkmate() === true) {
            playAudio("/img/mate2.mp3");
            stopClock();
            GameStatus = "Mate";
            status = 'Game over, ' + moveColor + ' is in checkmate.';
            if(!($('#modal_new_game__result').length > 0)) {
                if(my_move) {
                    gameOverResult = {r1: 'lose',r2: false,r3: 'checkmate'};
                    SetGameResult(0);
                } else {
                    gameOverResult = {r1: 'win',r2: false,r3: 'checkmate'};
                    SetGameResult(2);
                }
            }
        } else if(game.in_stalemate() === true) {
            playAudio("/img/mate2.mp3");
            stopClock();
            GameStatus = "Stalemate";
            status = 'Game over, ' + moveColor + ' is in stalemate.';
            if(!($('#modal_new_game__result').length > 0)) {
                if(my_move) {
                    gameOverResult = {r1: 'draw',r2: false,r3: 'stalemate'};
                    SetGameResult(1);
                } else {
                    gameOverResult = {r1: 'draw',r2: false,r3: 'stalemate'};
                    SetGameResult(1);
                }
            }
        } else if(game.in_draw() === true) {
            playAudio("/img/mate2.mp3");
            stopClock();
            GameStatus = "Draw";
            status = 'Game over, drawn position';
            if(!($('#modal_new_game__result').length > 0)) {
                gameOverResult = {r1: 'draw',r2: false,r3: false};
                SetGameResult(1);
            }
        } else if(game.in_check() === true) {
            status += ', ' + moveColor + ' is in check'; GameStatus = "check";
        } else {
            status = moveColor + ' to move'; GameStatus = "still";
        }
    };
    function SetGameResult(MyGameResult) {
        clearInterval(getMoveInterval);
        stop_clock = true;
        stopClock();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetGameResult")',
            data: {
                "Game_ID": Game_ID,
                "MyResul": MyGameResult
            },
            dataType: 'json',
            success: function (res) {
                var coin = res.NewChessCoin;
                var coinD = res.ChessCoinDelta;
                var ratg = res.NewGameRating;
                var ratgD = res.GameRatingDelta;
                show_modal_new_game(coin, coinD, ratg, ratgD);
            },
            error: function (emp) {
               console.log('нет связи с сервером');
            }
        });
    }
</script>
<script>
    var time = { wtime: 300000, btime: 300000, inc: 5000 };
    var playerColor = MyColor === 'w' ? 'white' : 'black'
    var clockTimeoutID = null, stop = false;

    function setTime(baseTime, inc) {
        time = { wtime: baseTime * 1000, btime: baseTime * 1000, inc: inc * 1000 };
    }
    function displayClock(color, t) {
        if (stop) {
            console.log('displayClock stop');
            return;
        }
        var isRunning = false;
        if (time.startTime > 0 && color === time.clockColor) {
            t = Math.max(0, t + time.startTime - Date.now());
            isRunning = true;
        }
        var id = color === playerColor ? '#time2' : '#time1';
        var sec = Math.ceil(t / 1000);
        var min = Math.floor(sec / 60);
        sec -= min * 60;
        var hours = Math.floor(min / 60);
        min -= hours * 60;
        var display = hours + ':' + ('0' + min).slice(-2) + ':' + ('0' + sec).slice(-2);
        if (isRunning) {
            //display += sec & 1 ? ' /' : ' \\';
        }
        $(id).text(display);
        /*
                if (stop){
                    clearInterval(getMoveInterval);
                }
        */
        if (t === 0 && !stop) {
            stop = true;
            //clearInterval(getMoveInterval);
            GameStatus = "TimeOff"; SetMove();
            console.log([color, MyColor]);
            if (color[0] === MyColor) {
                playAudio("/img/mate2.mp3");
                gameOverResult = { r1: 'lose', r2: 'time', r3: false };
                SetGameResult(0);
            } else {
                playAudio("/img/mate.mp3");
                gameOverResult = { r1: 'win', r2: 'time', r3: false };
                SetGameResult(2);
            }
        }
    }
    function updateClock() {
        if (stop_clock === true) return;
        displayClock('white', time.wtime);
        displayClock('black', time.btime);
    }
    function clockTick() {
        if (stop_clock === true) return;
        updateClock();
        var t = (time.clockColor === 'white' ? time.wtime : time.btime) + time.startTime - Date.now();
        var timeToNextSecond = (t % 1000) + 1;
        clockTimeoutID = setTimeout(clockTick, timeToNextSecond);
    }
    function stopClock() {
        if (clockTimeoutID !== null) {
            clearTimeout(clockTimeoutID);
            clockTimeoutID = null;
        }
        if (time.startTime > 0) {
            var elapsed = Date.now() - time.startTime;
            time.startTime = null;
            if (time.clockColor === 'white')
                time.wtime = Math.max(0, time.wtime - elapsed);
            else
                time.btime = Math.max(0, time.btime - elapsed);
        }
    }
    function startClock() {
        if (stop_clock === true) return;
        if (game.turn() === 'w') {
            if (game.history().length >= 1)
                time.btime += time.inc;
            time.clockColor = 'white';
        } else {
            time.wtime += time.inc;
            time.clockColor = 'black';
        }
        time.startTime = Date.now();
        clockTick();
    }
    function playAudio(name) {
        console.log(['audio', name]);
        new Audio(name).play();
    };
</script>
<script>
    function dowload_pgn() {
        var $textarea = $('#modal_dowload_pgn_wrapper .dowload_pgn-textarea');
        $textarea.text(game.pgn());
        modal_open('dowload_pgn');
    }
    function add_msg_chat(msg_user_cls, msg) {
        var $chat = $('.chat');
        var $chat_btn = $('.open_chats_2');
        var msg_html = '<div class="' + msg_user_cls + '">' + msg + '</div>';

        if (msg_user_cls === 'chat_2') {
            if (!$chat_btn.hasClass('active')) {
                msgs_not_viewed_count++;
                $chat_btn.html('ЧАТ<span>' + msgs_not_viewed_count + '</span>');
            } else {
                msgs_not_viewed_count = 0;
                $chat_btn.html('ЧАТ');
            }
        }
        $chat.append(msg_html);
    };
    $(function () {
        var block;
        var block_r;
        var delta_h = 0;

        block = document.getElementById("resizetest");
        block_r = document.getElementById("block_resizer");
        document.onmouseup = clearXY;
        block_r.onmousedown = saveWH;

        function getXY(e) {
            if (e)
                return new Array(e.pageX, e.pageY);

            return new Array(window.event.clientX, window.event.clientY);
        }
        function saveWH(e) {
            var point = getXY(e);
            h_block = block.clientHeight;
            delta_h = h_block - point[1];
            document.onmousemove = resizeBlock;
            return false;
        }
        function clientHeight() {
            return document.documentElement.clientHeight == 0 ? document.body.clientHeight : document.documentElement.clientHeight;
        }
        function clearXY() {
            document.onmousemove = null;
        }
        function resizeBlock(e) {
            var point = getXY(e);
            var new_h = delta_h + point[1];
            if (new_h < 440)
                return;

            setHeigth(new_h);
        }
        function setHeigth(new_h) {
            block.style.height = new_h + "px";
            /*if (block.offsetTop + block.clientHeight > clientHeight())
                block.style.height = (clientHeight() - block.offsetTop) + "px";*/
        }

$('.open_chats_1').on('click', function(e){
        e.preventDefault();
        $(this).addClass('active');
        $('.chat_online').removeClass('active');
        $('.chat_online_2').addClass('active');
        $('.open_chats_2').removeClass('active');
    });

    $('.open_chats_2').on('click', function(e){
        e.preventDefault();
        $(this).addClass('active');
        $('.chat_online_2').removeClass('active');
        $('.chat_online').addClass('active');
        $('.open_chats_1').removeClass('active');
        msgs_not_viewed_count = 0;
        $(this).html('ЧАТ');
    });

    // left - .chat_2; right - .chat_3
    $('.chat_4').on('click', function(e){
        e.preventDefault();
        var $msg = $(this).parent().find('textarea');

        if( $msg.val().length < 1 )
            return;

        add_msg_chat( 'chat_3', $msg.val() )
        sendChatMessage($msg.val());
        $msg.val('');
    });
    function sendChatMessage(msg) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SetChatMessage")',
            data: {
                Game_ID: Game_ID,
                SenderColor: MyColor,
                Message: msg
            },
            dataType: 'json',
            success: function (res) {
                console.log(['SetChatMessage res', res]);
            },
            error: function (emp) {
               console.log('нет связи с сервером');
            }
        });
    };
    });
    function request_offer_draw() {
        showed_reject_offer_draw = false;
        showed_success_offer_draw = false;
        $('#offer_draw__hide_request').hide();
        GameStatus = "RequestDraw." + MyColor;
        SetMove();
        $('#offer_draw__content').html('<div class="offer_draw__preloader_container"><div id="offer_draw__preloader" class="preloader_bounce">'
            + '<div class="p_b1"></div><div class="p_b2"></div><div class="p_b3"></div>'
            + '</div>'
            + '<h3>Ожидаем ответ соперника</h3></div>');
    };
    function success_offer_draw() {
        if (showed_success_offer_draw) {
            return;
        }
        showed_success_offer_draw = true;
        modal_close('confirm_offer_draw');
        $('#offer_draw__content').html('');
        $('#offer_draw__hide_request').show();
        gameOverResult = { r1: 'draw', r2: '', r3: '' };
        SetGameResult(1);
    };
    function reject_offer_draw() {
        if (showed_reject_offer_draw) {
            return;
        }
        showed_reject_offer_draw = true;
        $('#offer_draw__hide_request').hide();
        modal_open('confirm_offer_draw');
        $('#offer_draw__content').html('<div class="modal__form__title"><h3>Соперник отказался</h3></div><br><button class="btn btn-primary" onclick="clear_result_offer_draw();">Ok</button>');
    };
    function clear_result_offer_draw() {
        modal_close('confirm_offer_draw');
        setTimeout(function () {
            $('#offer_draw__content').html('');
            $('#offer_draw__hide_request').show();
        }, 500);
    };
    function send_success_draw() {
        modal_close('request_draw');
        GameStatus = "SuccessDraw." + MyColor;
        SetMove();
        gameOverResult = { r1: 'draw', r2: false, r3: false };
        SetGameResult(1);
    };
    function send_reject_draw() {
        modal_close('request_draw');
        GameStatus = "RejectDraw." + MyColor;
        SetMove();
    };
    function request_surrender() {
        modal_close('confirm_surrender');
        GameStatus = "Resign";
        SetMove();
        gameOverResult = { r1: 'lose', r2: false, r3: false };
        SetGameResult(0);
    };
    function show_modal_new_game(coin, coinD, ratg, ratgD) {
        if (coin === undefined)
            coin = false;
        if (coinD === undefined)
            coinD = false;
        if (ratg === undefined)
            ratg = false;
        if (ratgD === undefined)
            ratgD = false;

        var text = '', stat = '', func = '';

        if (gameOverResult.r3 === 'checkmate')
            text += 'Мат! ';
        if (gameOverResult.r3 === 'stalemate')
            text += 'Пат! ';

        if (gameOverResult.r1 === 'win') {
            text += 'Вы выиграли!';
            func = '';
            if (gameOverResult.r2 === 'surrender')
                text += ' Соперник сдался';
            else if (gameOverResult.r2 === 'close')
                text += ' Соперник покинул игру';
            else if (gameOverResult.r2 === 'time')
                text += ' У соперника закончилось время';
        } else if (gameOverResult.r1 === 'lose') {
            text += 'Вы проиграли!';
            func = '';
            if (gameOverResult.r2 === 'time')
                text += ' У вас закочилось время';
        } else if (gameOverResult.r1 === 'draw') {
            text = 'Ничья!';
            func = '';
        } else {
            return;
        }

        if (ratg && ratgD) {
            if (ratgD.toString().indexOf('-') === -1)
                ratgD = '+' + ratgD;
            stat += '<p>Ваш рейтинг: ' + ratg + ' ( ' + ratgD + ' )</p>';
        }

        if (coin && coinD) {
            if (coinD.toString().indexOf('-') === -1)
                coinD = '+' + coinD;
            stat += '<p>Chess Coins: ' + coin + ' ( ' + coinD + ' )</p>';
        }
        clear_result_modal_new_game();
        $('#modal_new_game_wrapper').find('.form-wrapper').prepend('<div id="modal_new_game__result">'
            + '<div class="modal__form__title">'
            + '<p>' + text + '</p>'
            + stat + '</div>'
            + '<button class="btn btn-primary w_auto" onclick="' + func + '">Реванш</button>'
            + '<a href="/Game" class="btn btn-default w_auto">Новая игра</a></div>');
        stop = true;
        modal_open('new_game');
    };
    function clear_result_modal_new_game() {
        if ($('#modal_new_game__result').length > 0)
            $('#modal_new_game__result').remove();
    };
    $(function () {
        mount_modal_select_piece();

        $(document).keyup(function (e) {
            if (e.which === 37) {
                $('#prev_move').addClass('active').focus().click();
                setTimeout("$('#prev_move').removeClass('active')", 300);
            }
            if (e.which === 39) {
                $('#next_move').addClass('active').focus().click();
                setTimeout("$('#next_move').removeClass('active')", 300);
            }
        });
    });
    function displayHistoryPgn() {
        var icons = { p: 'fa-chess-pawn', r: 'fa-chess-rook', n: 'fa-chess-knight', b: 'fa-chess-bishop', q: 'fa-chess-queen', k: 'fa-chess-king' };
        var history = game.history({ verbose: true });
        var html = '';
        var line = 0;
        var pgnEl = $('#pgn');
        if (history.length > 0) {
            history.forEach(function (item, i) {
                var icon = icons[history[i].piece];
                if (i % 2 === 0) {
                    line++;
                    html += '<div class="line"><span>#' + line + ' </span><span class="pgn--' + item.color + '"><i class="fas ' + icon + '"></i> ' + item.to + '</span>';
                } else {
                    html += '<span class="pgn--' + item.color + '"><i class="fas ' + icon + '"></i> ' + item.to + '</span></div>';
                }
            });
            pgnEl.html(html);
            pgnEl.scrollTop(pgnEl.get(0).scrollHeight);

        } else {
            pgnEl.html('');
        }
    };
    function getRemovedPiece(fen) {
        if (fen === undefined)
            fen = false;
        var pdef = { P: 8, R: 2, N: 2, B: 2, Q: 1, K: 1 };
        var str = fen.split(' ')[0].replace(/\//g, '').replace(/[0-9]/g, '');
        var w = str.replace(/[a-z]/g, '');
        var b = str.replace(/[A-Z]/g, '');
        var pcurrent = {
            w: { P: m(w, 'P'), R: m(w, 'R'), N: m(w, 'N'), B: m(w, 'B'), Q: m(w, 'Q'), K: m(w, 'K') },
            b: { P: m(b, 'p'), R: m(b, 'r'), N: m(b, 'n'), B: m(b, 'b'), Q: m(b, 'q'), K: m(b, 'k') }
        };
        var pnew = {
            w: { P: 0, R: 0, N: 0, B: 0, Q: 0, K: 0 },
            b: { P: 0, R: 0, N: 0, B: 0, Q: 0, K: 0 }
        };
        function m(str, p) {
            var r = new RegExp(p, 'g')
            return (str.match(r)) ? str.match(r).length : 0;
        }
        ;
        for (key in pcurrent.b) {
            var count = pdef[key] - pcurrent.b[key];
            if (count > 0)
                pnew.b[key] = count;
        }
        ;
        for (key in pcurrent.w) {
            var count = pdef[key] - pcurrent.w[key];
            if (count > 0)
                pnew.w[key] = count;
        }
        ;
        showRemovedPiece(pnew);
    };
    function showRemovedPiece(pnew) {
        var whtml = '';
        var bhtml = '';
        var icons = { P: 'fa-chess-pawn', R: 'fa-chess-rook', N: 'fa-chess-knight', B: 'fa-chess-bishop', Q: 'fa-chess-queen', K: 'fa-chess-king' }
        for (key in pnew.w) {
            var uid = 'b' + key;
            if (pnew.w[key] > 0) {
                var html = '<i class="removed_piece_to_w fas ' + icons[key] + '"></i>';
                if (pnew.w[key] > 1)
                    html = html.repeat(pnew.w[key]);
                whtml += '<span>' + html + '</span>';
            }
        }
        for (key in pnew.b) {
            var uid = 'w' + key;
            if (pnew.b[key] > 0) {
                var html = '<i class="removed_piece_to_b fas ' + icons[key] + '"></i>';
                if (pnew.b[key] > 1)
                    html = html.repeat(pnew.b[key]);
                bhtml += '<span>' + html + '</span>';
            }
        }
        $('#removed_piece1').html((MyColor === 'b') ? bhtml : whtml);
        $('#removed_piece2').html((MyColor === 'b') ? whtml : bhtml);
    };
    var history_counter = false;
    var prev_move = false;
    var next_move = false;
    function startMove() {
        var history_fen = game_history_fen;
        prev_move = 0;
        history_counter = 0;
        board.position(history_fen[0].split(' ')[0]);
    };
    function endMove() {
        var history_fen = game_history_fen;
        var len = history_fen.length;
        prev_move = true;
        history_counter = len - 1;
        board.position(history_fen[len - 1].split(' ')[0]);
    };
    function prevMove() {
        var history_fen = game_history_fen;
        var len = history_fen.length;
        if (prev_move === 0 || history_counter === 0)
            return;
        if (history_counter === false)
            history_counter = len - 1;
        prev_move = history_counter - 1;
        board.position(history_fen[prev_move].split(' ')[0]);
        history_counter--;
    };
    function nextMove() {
        var history_fen = game_history_fen;
        var len = history_fen.length;
        if (history_counter === len - 1 || history_counter === false)
            return;
        next_move = history_counter + 1;
        board.position(history_fen[next_move].split(' ')[0]);
        history_counter++;
        prev_move = true;
    };
    function mount_modal_select_piece() {
        var modal = $('#modal_select_piece_wrapper');

        if (!modal.length)
            return;

        var piece_theme = (localStorage['cb_piece']) ? localStorage['cb_piece'].split("--")[1] : 'tour_new';
        var piece_color = (typeof MyColor !== 'undefined') ? MyColor : 'w';

        modal.find('.btn___select_piece').each(function (ind, el) {
            var btn = $(el);
            var piece = btn.data('piece').toUpperCase();
            btn.html('<img src="/board/pieces/' + piece_theme + '/' + piece_color + piece + '.png">');
        });
    };
    function select_piece_promotion(move) {
        modal_open('select_piece');
        $('.btn___select_piece').on('click', function (e) {
            modal_close('select_piece');
            move['promotion'] = $(this).data('piece');
            makeMove(move);
            snapEnd();
        });
    };

</script>
}
